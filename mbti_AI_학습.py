# -*- coding: utf-8 -*-
"""최종 모듈.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmRlh18iEv5tZN85WfB3liF8CH-5gkl8
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import random
import pickle
import tensorflow as tf
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import load_model
from keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import random

## Load pickle
with open("/content/drive/MyDrive/x_tra.pickle","rb") as fr:
    X_train = pickle.load(fr)
## Load pickle
with open("/content/drive/MyDrive/y_tra.pickle","rb") as fr:
    y_train = pickle.load(fr)

print("Generated X_train shape:", X_train.shape)
print("Generated y_train shape:", y_train.shape)
print(X_train)
print(y_train)

# 출력합니다.
print("Features:", X_train)
print(len(X_train))
print("Labels:", y_train)
print(len(y_train))

# 모델 구성
model = Sequential([
    Dense(128, activation='relu', input_shape=(9,)),
    Dense(64, activation='relu'),
    Dense(16, activation='softmax')  # MBTI 16가지 유형에 대한 확률 예측
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()
# 학습

early_stopping = EarlyStopping(patience=10, monitor='val_loss', mode='min', verbose=1, restore_best_weights=True)
model_checkpoint = ModelCheckpoint('/content/drive/MyDrive/best_model.h5', save_best_only=True)

history = model.fit(X_train, y_train, epochs=100, validation_split=0.2, callbacks=[early_stopping, model_checkpoint])

plt.figure(figsize = (12,4)) # 그래프 가로세로 비율 (그림(figure)의 크기, (가로, 세로) 인치 단위)
plt.subplot(1,1,1) # 1행 1열 첫 번째 위치
plt.plot(history.history['loss'], 'b--', label = 'loss') # loss 파란색 점선
plt.plot(history.history['accuracy'], 'g--', label = 'Accuracy') # accuracy 는 녹색실선
plt.xlabel('Epoch')
plt.legend()
plt.show()
print('최적화 완료!')

# 예측 모델 불러오기
best_model = tf.keras.models.load_model('/content/drive/MyDrive/best_model.h5')

# 예측
new_data = np.array([[10, 15, 75, 20, 15, 65, 48, 12, 40]])
predicted_probs = best_model.predict(new_data)
predicted_mbti_index = np.argmax(predicted_probs)
predicted_mbti_prob = predicted_probs[0, predicted_mbti_index] * 100  # 확률을 백분율로 변환

# 예측된 MBTI 유형 인덱스를 실제 MBTI 유형으로 변환
mbti_types = ['ENTJ', 'INTJ', 'ENTP', 'INTP', 'ENFJ', 'INFJ', 'ENFP', 'INFP', 'ESTJ', 'ISTJ', 'ESFJ', 'ISFJ', 'ESTP', 'ISTP', 'ESFP', 'ISFP']
predicted_mbti = mbti_types[predicted_mbti_index]

print("Predicted MBTI:", predicted_mbti)
print("Confidence:", predicted_mbti_prob, "%")

